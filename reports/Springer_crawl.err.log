Traceback (most recent call last):
  File "c:\users\lenovo\appdata\local\programs\python\python39\lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\users\lenovo\appdata\local\programs\python\python39\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "c:\users\lenovo\appdata\local\programs\python\python39\lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\users\lenovo\appdata\local\programs\python\python39\lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "c:\users\lenovo\appdata\local\programs\python\python39\lib\asyncio\base_events.py", line 642, in run_until_complete
    return future.result()
  File "c:\users\lenovo\appdata\local\programs\python\python39\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "c:\users\lenovo\appdata\local\programs\python\python39\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\users\lenovo\appdata\local\programs\python\python39\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import requests
import csv
from datetime import datetime
import pandas as pd

# Silahkan membuat api key dari https://dev.springernature.com/#api
api_key = "8bd578e4f19c2e9b1397f546bf3a9aa8"
keyword = "web mining"  # Ganti dengan kata kunci yang diinginkan

url = "https://api.springernature.com/meta/v2/json"
params = {
    "q": keyword,  # Menggunakan kata kunci langsung
    "api_key": api_key,
    "p": 10  # Jumlah hasil yang ingin ditampilkan
}

response = requests.get(url, params=params)

if response.status_code == 200:
    data = response.json()
    print(f"Total hasil: {data['result'][0]['total']}\n")

    # List untuk menyimpan semua data
    all_records = []

    for i, record in enumerate(data['records'], 1):
        doi = record.get('doi', 'N/A')
        title = record.get('title', 'No title')
        abstract = record.get('abstract', 'No abstract')
        publication_date = record.get('publicationDate', 'N/A')
        content_type = record.get('contentType', 'N/A')
        publisher = record.get('publisher', 'N/A')

        # Extract authors
        authors = []
        if 'creators' in record:
            for creator in record['creators']:
                authors.append(creator.get('creator', 'N/A'))

        # Extract URL jika ada
        url_value = 'N/A'
        if 'url' in record and record['url']:
            url_value = record['url'][0].get('value', 'N/A')

        # Simpan data ke dictionary
        record_data = {
            'no': i,
            'doi': doi,
            'title': title,
            'publication_date': publication_date,
            'content_type': content_type,
            'publisher': publisher,
            'authors': '; '.join(authors),
            'abstract': abstract,
            'url': url_value
        }
        all_records.append(record_data)

        # Print ke console
        print(f"Result {i}:")
        print(f"DOI: {doi}")
        print(f"Title: {title}")
        print(f"Publication Date: {publication_date}")
        print(f"Content Type: {content_type}")
        print(f"Authors: {', '.join(authors)}")
        print(f"Abstract: {abstract[:300]}...")  # Batasi abstract untuk readability
        print("-" * 80 + "\n")

    # Simpan ke CSV menggunakan pandas
    try:
        # Buat DataFrame
        df = pd.DataFrame(all_records)

        # Generate filename dengan timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"springer_{keyword.replace(' ', '_')}_{timestamp}.csv"

        # Simpan ke CSV
        df.to_csv(filename, index=False, encoding='utf-8')
        print(f"✅ Data berhasil disimpan ke: {filename}")
        print(f"📊 Jumlah record yang disimpan: {len(all_records)}")

    except Exception as e:
        print(f"❌ Error saat menyimpan CSV: {e}")

else:
    print("Error:", response.status_code, response.text)
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[2], line 4[0m
[0;32m      2[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mcsv[39;00m
[0;32m      3[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01mdatetime[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m datetime
[1;32m----> 4[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mpd[39;00m
[0;32m      6[0m [38;5;66;03m# Silahkan membuat api key dari https://dev.springernature.com/#api[39;00m
[0;32m      7[0m api_key [38;5;241m=[39m [38;5;124m"[39m[38;5;124m8bd578e4f19c2e9b1397f546bf3a9aa8[39m[38;5;124m"[39m

[1;31mModuleNotFoundError[0m: No module named 'pandas'

